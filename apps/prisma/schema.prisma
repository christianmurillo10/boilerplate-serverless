generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model customers {
  id                String    @id @default(uuid()) @db.Char(36)
  created_at        DateTime  @db.DateTime(0)
  updated_at        DateTime? @db.DateTime(0)
  deleted_at        DateTime? @db.DateTime(0)
  verified_at       DateTime? @db.DateTime(0)
  last_login_at     DateTime? @db.DateTime(0)
  customer_no       String?   @db.VarChar(100)
  firstname         String    @db.VarChar(100)
  middlename        String?   @db.VarChar(100)
  lastname          String    @db.VarChar(100)
  email             String    @db.VarChar(100)
  password          String    @db.VarChar(100)
  contact_no        String    @db.VarChar(100)
  primary_address   String    @db.VarChar(255)
  secondary_address String?   @db.VarChar(255)
  image_path        String?   @db.VarChar(255)
  gender_type       String?   @db.VarChar(100)
  status            String    @default("PENDING") @db.VarChar(100)
  is_active         Boolean   @default(true)
  is_logged         Boolean   @default(false)
}

model rbac_modules {
  id                     Int                      @id @default(autoincrement())
  created_at             DateTime                 @db.DateTime(0)
  updated_at             DateTime?                @db.DateTime(0)
  deleted_at             DateTime?                @db.DateTime(0)
  name                   String                   @db.VarChar(100)
  icon                   String?                  @db.VarChar(100)
  path                   String?                  @db.VarChar(100)
  order_display          Int?
  permissions            Json                     @default("[]") @db.Json
  parent_id              Int?
  is_section             Boolean                  @default(false)
  is_parent              Boolean                  @default(false)
  parent                 rbac_modules?            @relation("rbac_modulesTorbac_modules", fields: [parent_id], references: [id], map: "rbac_modules_ibfk_1")
  other_rbac_modules     rbac_modules[]           @relation("rbac_modulesTorbac_modules")
  rbac_role_based_access rbac_role_based_access[]

  @@index([parent_id], map: "parent_id")
}

model rbac_role_based_access {
  id                   Int          @id @default(autoincrement())
  created_at           DateTime     @db.DateTime(0)
  updated_at           DateTime?    @db.DateTime(0)
  deleted_at           DateTime?    @db.DateTime(0)
  permissions          Json         @default("[]") @db.Json
  created_user_id      String       @db.Char(36)
  updated_user_id      String?      @db.Char(36)
  deleted_user_id      String?      @db.Char(36)
  rbac_module_id       Int
  role_id              Int?
  user_id              String?      @db.Char(36)
  is_role_based_access Boolean      @default(true)
  created_users        users        @relation("rbac_role_based_access_created_user_idTousers", fields: [created_user_id], references: [id], onDelete: NoAction, map: "rbac_role_based_access_ibfk_1")
  updated_users        users?       @relation("rbac_role_based_access_updated_user_idTousers", fields: [updated_user_id], references: [id], map: "rbac_role_based_access_ibfk_2")
  deleted_users        users?       @relation("rbac_role_based_access_deleted_user_idTousers", fields: [deleted_user_id], references: [id], map: "rbac_role_based_access_ibfk_3")
  rbac_modules         rbac_modules @relation(fields: [rbac_module_id], references: [id], onDelete: NoAction, map: "rbac_role_based_access_ibfk_4")
  roles                roles?       @relation(fields: [role_id], references: [id], map: "rbac_role_based_access_ibfk_5")
  users                users?       @relation("rbac_role_based_access_user_idTousers", fields: [user_id], references: [id], map: "rbac_role_based_access_ibfk_6")

  @@index([created_user_id], map: "created_user_id")
  @@index([deleted_user_id], map: "deleted_user_id")
  @@index([rbac_module_id], map: "rbac_module_id")
  @@index([role_id], map: "role_id")
  @@index([updated_user_id], map: "updated_user_id")
  @@index([user_id], map: "user_id")
}

model roles {
  id                     Int                      @id @default(autoincrement())
  created_at             DateTime                 @db.DateTime(0)
  updated_at             DateTime?                @db.DateTime(0)
  deleted_at             DateTime?                @db.DateTime(0)
  name                   String                   @db.VarChar(100)
  description            String?                  @db.Text
  rbac_role_based_access rbac_role_based_access[]
  users                  users[]
}

model users {
  id                                   String                   @id @default(uuid()) @db.Char(36)
  created_at                           DateTime                 @db.DateTime(0)
  updated_at                           DateTime?                @db.DateTime(0)
  deleted_at                           DateTime?                @db.DateTime(0)
  last_login_at                        DateTime?                @db.DateTime(0)
  name                                 String                   @db.VarChar(100)
  username                             String                   @db.VarChar(100)
  email                                String                   @db.VarChar(100)
  password                             String                   @db.VarChar(100)
  image_path                           String?                  @db.VarChar(255)
  role_id                              Int
  is_active                            Boolean                  @default(true)
  is_role_based_access                 Boolean                  @default(true)
  is_logged                            Boolean                  @default(false)
  rbac_role_based_access_created_users rbac_role_based_access[] @relation("rbac_role_based_access_created_user_idTousers")
  rbac_role_based_access_updated_users rbac_role_based_access[] @relation("rbac_role_based_access_updated_user_idTousers")
  rbac_role_based_access_deleted_users rbac_role_based_access[] @relation("rbac_role_based_access_deleted_user_idTousers")
  rbac_role_based_access_users         rbac_role_based_access[] @relation("rbac_role_based_access_user_idTousers")
  audit_trails_created_users           audit_trails[]           @relation("audit_trails_created_user_idTousers")
  roles                                roles                    @relation(fields: [role_id], references: [id], map: "users_ibfk_2")

  @@index([role_id], map: "role_id")
}

model audit_trails {
  id              String   @id @default(uuid()) @db.Char(36)
  created_at      DateTime @db.DateTime(0)
  table_name      String   @db.VarChar(100)
  action          String   @db.VarChar(100)
  record_id       String   @db.VarChar(255)
  old_values      Json     @default("{}") @db.Json
  new_values      Json     @default("{}") @db.Json
  user_agent      String?  @db.VarChar(255)
  host            String?  @db.VarChar(100)
  ip_address      String?  @db.VarChar(100)
  created_user_id String   @db.Char(36)
  created_users   users    @relation("audit_trails_created_user_idTousers", fields: [created_user_id], references: [id], onDelete: NoAction, map: "audit_trails_ibfk_1")

  @@index([created_user_id], map: "created_user_id")
}
